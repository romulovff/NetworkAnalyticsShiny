dt.male.mutual.likes <- dt.likes.gender[dt.likes.gender$receiver_gender == "Male" & dt.likes.gender$sender_gender == "Male"]
cat("The number of mutual likes among females is", nrow(dt.female.mutual.likes), "equating to", round(nrow(dt.female.mutual.likes)/nrow(dt.likes.gender[dt.likes.gender$sender_gender == "Female"])*100, digits = 2), "% of all likes sent by females\n")
cat("The number of mutual likes among males is", nrow(dt.male.mutual.likes), "equating to", round(nrow(dt.male.mutual.likes)/nrow(dt.likes.gender[dt.likes.gender$sender_gender == "Male"])*100, digits = 2), "% of all likes sent by males\n")
cat("The number of individidual females liking other females of the same gender is", length(unique(dt.female.mutual.likes$sender_user_id)),"\n")
cat("The number of individidual males liking other males of the same gender is", length(unique(dt.male.mutual.likes$sender_user_id)))
cat("In absolute terms, fewer women-to-women likes were sent than men-to-men. In relative terms, the ratio of women-to-women likes is higher than men-to-men likes.")
dt.user.gender <- dt.users[,c("user_id","gender")]
dt.likes.gender <- merge(dt.likes, dt.user.gender, by.x = "sender_user_id", by.y = "user_id")
dt.likes.gender <- merge(dt.likes.gender, dt.user.gender, by.x = "receiver_user_id", by.y = "user_id")
colnames(dt.likes.gender)[4] <- "sender_gender"
colnames(dt.likes.gender)[5] <- "receiver_gender"
dt.female.mutual.likes <- dt.likes.gender[dt.likes.gender$receiver_gender == "Female" & dt.likes.gender$sender_gender == "Female"]
dt.male.mutual.likes <- dt.likes.gender[dt.likes.gender$receiver_gender == "Male" & dt.likes.gender$sender_gender == "Male"]
cat("The number of mutual likes among females is", nrow(dt.female.mutual.likes), "equating to", round(nrow(dt.female.mutual.likes)/nrow(dt.likes.gender[dt.likes.gender$sender_gender == "Female"])*100, digits = 2), "% of all likes sent by females\n")
cat("The number of mutual likes among males is", nrow(dt.male.mutual.likes), "equating to", round(nrow(dt.male.mutual.likes)/nrow(dt.likes.gender[dt.likes.gender$sender_gender == "Male"])*100, digits = 2), "% of all likes sent by males\n")
cat("The number of individidual females liking other females of the same gender is", length(unique(dt.female.mutual.likes$sender_user_id)),"\n")
cat("The number of individidual males liking other males of the same gender is", length(unique(dt.male.mutual.likes$sender_user_id)))
cat("\nIn absolute terms, fewer women-to-women likes were sent than men-to-men. In relative terms, the ratio of women-to-women likes is higher than men-to-men likes.")
dt.user.gender <- dt.users[,c("user_id","gender")]
dt.likes.gender <- merge(dt.likes, dt.user.gender, by.x = "sender_user_id", by.y = "user_id")
dt.likes.gender <- merge(dt.likes.gender, dt.user.gender, by.x = "receiver_user_id", by.y = "user_id")
colnames(dt.likes.gender)[4] <- "sender_gender"
colnames(dt.likes.gender)[5] <- "receiver_gender"
dt.female.mutual.likes <- dt.likes.gender[dt.likes.gender$receiver_gender == "Female" & dt.likes.gender$sender_gender == "Female"]
dt.male.mutual.likes <- dt.likes.gender[dt.likes.gender$receiver_gender == "Male" & dt.likes.gender$sender_gender == "Male"]
cat("The number of mutual likes among females is", nrow(dt.female.mutual.likes), "equating to", round(nrow(dt.female.mutual.likes)/nrow(dt.likes.gender[dt.likes.gender$sender_gender == "Female"])*100, digits = 2), "% of all likes sent by females\n")
cat("The number of mutual likes among males is", nrow(dt.male.mutual.likes), "equating to", round(nrow(dt.male.mutual.likes)/nrow(dt.likes.gender[dt.likes.gender$sender_gender == "Male"])*100, digits = 2), "% of all likes sent by males\n")
cat("The number of individidual females liking other females of the same gender is", length(unique(dt.female.mutual.likes$sender_user_id)),"\n")
cat("The number of individidual males liking other males of the same gender is", length(unique(dt.male.mutual.likes$sender_user_id)))
cat("\n\nIn absolute terms, fewer women-to-women likes were sent than men-to-men. In relative terms, the ratio of women-to-women likes is higher than men-to-men likes.")
dt.user.gender <- dt.users[,c("user_id","gender")]
dt.likes.gender <- merge(dt.likes, dt.user.gender, by.x = "sender_user_id", by.y = "user_id")
dt.likes.gender <- merge(dt.likes.gender, dt.user.gender, by.x = "receiver_user_id", by.y = "user_id")
colnames(dt.likes.gender)[4] <- "sender_gender"
colnames(dt.likes.gender)[5] <- "receiver_gender"
dt.female.mutual.likes <- dt.likes.gender[dt.likes.gender$receiver_gender == "Female" & dt.likes.gender$sender_gender == "Female"]
dt.male.mutual.likes <- dt.likes.gender[dt.likes.gender$receiver_gender == "Male" & dt.likes.gender$sender_gender == "Male"]
cat("The number of likes among females is", nrow(dt.female.mutual.likes), "equating to", round(nrow(dt.female.mutual.likes)/nrow(dt.likes.gender[dt.likes.gender$sender_gender == "Female"])*100, digits = 2), "% of all likes sent by females\n")
cat("The number of likes among males is", nrow(dt.male.mutual.likes), "equating to", round(nrow(dt.male.mutual.likes)/nrow(dt.likes.gender[dt.likes.gender$sender_gender == "Male"])*100, digits = 2), "% of all likes sent by males\n")
cat("The number of individidual females liking other females of the same gender is", length(unique(dt.female.mutual.likes$sender_user_id)),"\n")
cat("The number of individidual males liking other males of the same gender is", length(unique(dt.male.mutual.likes$sender_user_id)))
cat("\n\nIn absolute terms, fewer women-to-women likes were sent than men-to-men. In relative terms, the ratio of women-to-women likes is higher than men-to-men likes.")
dt.user.gender <- dt.users[,c("user_id","gender")]
dt.likes.gender <- merge(dt.likes, dt.user.gender, by.x = "sender_user_id", by.y = "user_id")
dt.likes.gender <- merge(dt.likes.gender, dt.user.gender, by.x = "receiver_user_id", by.y = "user_id")
colnames(dt.likes.gender)[4] <- "sender_gender"
colnames(dt.likes.gender)[5] <- "receiver_gender"
dt.female.mutual.likes <- dt.likes.gender[dt.likes.gender$receiver_gender == "Female" & dt.likes.gender$sender_gender == "Female"]
dt.male.mutual.likes <- dt.likes.gender[dt.likes.gender$receiver_gender == "Male" & dt.likes.gender$sender_gender == "Male"]
cat("The number of likes among females is", nrow(dt.female.mutual.likes), ", equating to", round(nrow(dt.female.mutual.likes)/nrow(dt.likes.gender[dt.likes.gender$sender_gender == "Female"])*100, digits = 2), "% of all likes sent by females\n")
cat("The number of likes among males is", nrow(dt.male.mutual.likes), ", equating to", round(nrow(dt.male.mutual.likes)/nrow(dt.likes.gender[dt.likes.gender$sender_gender == "Male"])*100, digits = 2), "% of all likes sent by males\n")
cat("The number of individidual females liking other females of the same gender is", length(unique(dt.female.mutual.likes$sender_user_id)),"\n")
cat("The number of individidual males liking other males of the same gender is", length(unique(dt.male.mutual.likes$sender_user_id)))
cat("\n\nIn absolute terms, fewer women-to-women likes were sent than men-to-men. In relative terms, the ratio of women-to-women likes is higher than men-to-men")
dt.user.gender <- dt.users[,c("user_id","gender")]
dt.likes.gender <- merge(dt.likes, dt.user.gender, by.x = "sender_user_id", by.y = "user_id")
dt.likes.gender <- merge(dt.likes.gender, dt.user.gender, by.x = "receiver_user_id", by.y = "user_id")
colnames(dt.likes.gender)[4] <- "sender_gender"
colnames(dt.likes.gender)[5] <- "receiver_gender"
dt.female.mutual.likes <- dt.likes.gender[dt.likes.gender$receiver_gender == "Female" & dt.likes.gender$sender_gender == "Female"]
dt.male.mutual.likes <- dt.likes.gender[dt.likes.gender$receiver_gender == "Male" & dt.likes.gender$sender_gender == "Male"]
cat("The number of likes among females is", nrow(dt.female.mutual.likes), ", equating to", round(nrow(dt.female.mutual.likes)/nrow(dt.likes.gender[dt.likes.gender$sender_gender == "Female"])*100, digits = 2), "% of all likes sent by females.\n")
cat("The number of likes among males is", nrow(dt.male.mutual.likes), ", equating to", round(nrow(dt.male.mutual.likes)/nrow(dt.likes.gender[dt.likes.gender$sender_gender == "Male"])*100, digits = 2), "% of all likes sent by males.\n")
cat("The number of individidual females liking other females of the same gender is", length(unique(dt.female.mutual.likes$sender_user_id)),"\n")
cat("The number of individidual males liking other males of the same gender is", length(unique(dt.male.mutual.likes$sender_user_id)))
cat("\n\nIn absolute terms, fewer women-to-women likes were sent than men-to-men. In relative terms, the ratio of women-to-women likes is higher than men-to-men")
dt.user.gender <- dt.users[,c("user_id","gender")]
dt.likes.gender <- merge(dt.likes, dt.user.gender, by.x = "sender_user_id", by.y = "user_id")
dt.likes.gender <- merge(dt.likes.gender, dt.user.gender, by.x = "receiver_user_id", by.y = "user_id")
colnames(dt.likes.gender)[4] <- "sender_gender"
colnames(dt.likes.gender)[5] <- "receiver_gender"
dt.female.mutual.likes <- dt.likes.gender[dt.likes.gender$receiver_gender == "Female" & dt.likes.gender$sender_gender == "Female"]
dt.male.mutual.likes <- dt.likes.gender[dt.likes.gender$receiver_gender == "Male" & dt.likes.gender$sender_gender == "Male"]
cat("The number of likes among females is", nrow(dt.female.mutual.likes), ", equating to", round(nrow(dt.female.mutual.likes)/nrow(dt.likes.gender[dt.likes.gender$sender_gender == "Female"])*100, digits = 2), "% of all likes sent by females.\n")
cat("The number of likes among males is", nrow(dt.male.mutual.likes), ", equating to", round(nrow(dt.male.mutual.likes)/nrow(dt.likes.gender[dt.likes.gender$sender_gender == "Male"])*100, digits = 2), "% of all likes sent by males.\n")
cat("The number of individidual females liking other females of the same gender is", length(unique(dt.female.mutual.likes$sender_user_id)),".\n")
cat("The number of individidual males liking other males of the same gender is", length(unique(dt.male.mutual.likes$sender_user_id)),".")
cat("\n\nIn absolute terms, fewer women-to-women likes were sent than men-to-men. In relative terms, the ratio of women-to-women likes is higher than men-to-men.")
dt.network <- na.omit(dt.users, cols = c("user_id", "inviter_id"))
dt.invites <- dt.network[, 2:1]
g.invites <- graph_from_data_frame(dt.invites, directed = TRUE, vertices = dt.users)
summary(g.invites)
cat("\nThe longest chain is", farthest_vertices(g.invites)$distance, ".\n")
cat("The clustering coefficient is", transitivity(g.invites), ".\n\nThe clustering coefficient is computed by dividing the number of links among neighbours of a node by the possible links among neighbours of that node. Since only one invite per person can be accepted, there will not be any links among neighbours of any node, resulting in this coefficient being always equal to zero in this network.")
# Length of all the shortest paths between vertices
dt.path <- data.table(count = distance_table(g.invites, directed = TRUE)$res)
dt.path <- cbind(path_length = rownames(dt.path), dt.path)
rownames(dt.path) <- 1:nrow(dt.path)
# Plotting the distribution of the length of all the shortest paths between vertices
ggplot(dt.path, aes(x = path_length, y = count)) + geom_bar(stat = "identity")
# Computing the mean length of the paths between vertices
mean.length <- mean_distance(g.invites, directed = TRUE, unconnected = TRUE)
cat("\nYes, we can observe the same cascade behaviour in the invites network as Goel, Watts and Goldstein observed in online networks. Out of", sum(dt.path$count), "cascades only", sum(dt.path$count[dt.path$path_length >= 7]), "had a length of seven or higher (", round(sum(dt.path$count[dt.path$path_length >= 7])/sum(dt.path$count)*100, digits = 2), "%). The majority of instances show no difusion at all (", round(sum(dt.path$count[dt.path$path_length == 1])/sum(dt.path$count)*100, digits = 2), "%). The size distribution of diffusion events is right-skewed and heavy-tailed just as mentioned in the paper with the mean length of cascades being equal to", mean.length, ".")
# Retrieving only the rows without NAs in the user_id and inviter_id columns
dt.network.gender <- na.omit(dt.users, cols = c("user_id", "inviter_id", "gender"))
# Creating a dataframe with the edge list in the first two columns
dt.invites.gender <- dt.network.gender[, 2:1]
# Creating igraph directed graph
g.gender <- graph_from_data_frame(dt.invites.gender, directed = TRUE, vertices = dt.users)
# Changing gender from categorical to numeric to compute assortivity measure (could have used assortativity_nominal instead)
gender <- as.numeric(factor(V(g.gender)$gender))
# Computing assortivity coefficient
gender.assortivity <- assortativity(g.gender, gender, directed = TRUE)
# Similar steps were taken for the age assortivity
dt.network.age <- na.omit(dt.users, cols = c("user_id", "inviter_id", "birth_year"))
dt.invites.age <- dt.network.age[ ,2:1]
g.age <- graph_from_data_frame(dt.invites.age, directed = TRUE, vertices = dt.users)
age <- factor(V(g.age)$birth_year)
age.assortivity <- assortativity(g.age, age, directed = TRUE)
cat("The assortivity coefficient measures the level of homophily of the graph based on some vertex labeling or values assigned to vertices. The assortivity coefficient considering gender is", gender.assortivity, "which is a positive value, meaning that men are more likely to invite other men and that women are more likely to invite other women. The assortivity coefficient considering age is", age.assortivity, "which is a positive value. meaning that people tend to invite people that are close in age. Gender assortivity is lower than age assortivity meaning that the likelihood that people invite other people that are close in age is higher than that of the same gender.")
# Retrieving only the rows without NAs in the user_id and inviter_id columns
dt.network.gender <- na.omit(dt.users, cols = c("user_id", "inviter_id", "gender"))
# Creating a dataframe with the edge list in the first two columns
dt.invites.gender <- dt.network.gender[, 2:1]
# Creating igraph directed graph
g.gender <- graph_from_data_frame(dt.invites.gender, directed = TRUE, vertices = dt.users)
# Changing gender from categorical to numeric to compute assortivity measure (could have used assortativity_nominal instead)
gender <- as.numeric(factor(V(g.gender)$gender))
# Computing assortivity coefficient
gender.assortivity <- assortativity(g.gender, gender, directed = TRUE)
# Similar steps were taken for the age assortivity
dt.network.age <- na.omit(dt.users, cols = c("user_id", "inviter_id", "birth_year"))
dt.invites.age <- dt.network.age[ ,2:1]
g.age <- graph_from_data_frame(dt.invites.age, directed = TRUE, vertices = dt.users)
age <- factor(V(g.age)$birth_year)
age.assortivity <- assortativity(g.age, age, directed = TRUE)
cat("The assortivity coefficient measures the level of homophily of the graph based on some vertex labeling or values assigned to vertices. The assortivity coefficient considering gender is", gender.assortivity, "which is a positive value, meaning that men are more likely to invite other men and that women are more likely to invite other women. The assortivity coefficient considering age is", age.assortivity, "which is a positive value, meaning that people tend to invite other people that are close in age. Gender assortivity is lower than age assortivity meaning that the likelihood that people invite other people that are close in age is higher than that of the same gender.")
g.likes <- graph_from_data_frame(dt.likes, directed=TRUE, vertices=NULL)
summary(g.likes)
cat("\nThe clustering coefficient is", transitivity(g.likes), "\n\nIt is very low clustering coefficient signalling that the chance that two people like the same person is very low.")
dt.user.gender <- dt.users[,c("user_id","gender")]
dt.likes.gender <- merge(dt.likes, dt.user.gender, by.x = "sender_user_id", by.y = "user_id")
dt.likes.gender <- merge(dt.likes.gender, dt.user.gender, by.x = "receiver_user_id", by.y = "user_id")
colnames(dt.likes.gender)[4] <- "sender_gender"
colnames(dt.likes.gender)[5] <- "receiver_gender"
dt.female.mutual.likes <- dt.likes.gender[dt.likes.gender$receiver_gender == "Female" & dt.likes.gender$sender_gender == "Female"]
dt.male.mutual.likes <- dt.likes.gender[dt.likes.gender$receiver_gender == "Male" & dt.likes.gender$sender_gender == "Male"]
cat("The number of likes among females is", nrow(dt.female.mutual.likes), ", equating to", round(nrow(dt.female.mutual.likes)/nrow(dt.likes.gender[dt.likes.gender$sender_gender == "Female"])*100, digits = 2), "% of all likes sent by females.\n")
cat("The number of likes among males is", nrow(dt.male.mutual.likes), ", equating to", round(nrow(dt.male.mutual.likes)/nrow(dt.likes.gender[dt.likes.gender$sender_gender == "Male"])*100, digits = 2), "% of all likes sent by males.\n")
cat("The number of individidual females liking other females is", length(unique(dt.female.mutual.likes$sender_user_id)),".\n")
cat("The number of individidual males liking other males is", length(unique(dt.male.mutual.likes$sender_user_id)),".")
cat("\n\nIn absolute terms, fewer women-to-women likes were sent than men-to-men. In relative terms, the ratio of women-to-women likes is higher than men-to-men.")
dt.user.gender <- dt.users[, c("user_id","gender")]
dt.likes.gender <- merge(dt.likes, dt.user.gender, by.x = "sender_user_id", by.y = "user_id")
dt.likes.gender <- merge(dt.likes.gender, dt.user.gender, by.x = "receiver_user_id", by.y = "user_id")
colnames(dt.likes.gender)[4] <- "sender_gender"
colnames(dt.likes.gender)[5] <- "receiver_gender"
dt.female.mutual.likes <- dt.likes.gender[dt.likes.gender$receiver_gender == "Female" & dt.likes.gender$sender_gender == "Female"]
dt.male.mutual.likes <- dt.likes.gender[dt.likes.gender$receiver_gender == "Male" & dt.likes.gender$sender_gender == "Male"]
cat("The number of likes among females is", nrow(dt.female.mutual.likes), ", equating to", round(nrow(dt.female.mutual.likes)/nrow(dt.likes.gender[dt.likes.gender$sender_gender == "Female"])*100, digits = 2), "% of all likes sent by females.\n")
cat("The number of likes among males is", nrow(dt.male.mutual.likes), ", equating to", round(nrow(dt.male.mutual.likes)/nrow(dt.likes.gender[dt.likes.gender$sender_gender == "Male"])*100, digits = 2), "% of all likes sent by males.\n")
cat("The number of individidual females liking other females is", length(unique(dt.female.mutual.likes$sender_user_id)),".\n")
cat("The number of individidual males liking other males is", length(unique(dt.male.mutual.likes$sender_user_id)),".")
cat("\n\nIn absolute terms, fewer women-to-women likes were sent than men-to-men. In relative terms, the ratio of women-to-women likes is higher than men-to-men.")
dt.user.gender <- dt.users[, c("user_id","gender")]
dt.likes.gender <- merge(dt.likes, dt.user.gender, by.x = "sender_user_id", by.y = "user_id")
dt.likes.gender <- merge(dt.likes.gender, dt.user.gender, by.x = "receiver_user_id", by.y = "user_id")
colnames(dt.likes.gender)[4] <- "sender_gender"
colnames(dt.likes.gender)[5] <- "receiver_gender"
dt.female.mutual.likes <- dt.likes.gender[dt.likes.gender$receiver_gender == "Female" & dt.likes.gender$sender_gender == "Female"]
dt.male.mutual.likes <- dt.likes.gender[dt.likes.gender$receiver_gender == "Male" & dt.likes.gender$sender_gender == "Male"]
cat("The number of likes among females is", nrow(dt.female.mutual.likes), ", equating to", round(nrow(dt.female.mutual.likes)/nrow(dt.likes.gender[dt.likes.gender$sender_gender == "Female"])*100, digits = 2), "% of all likes sent by females.\n")
cat("The number of likes among males is", nrow(dt.male.mutual.likes), ", equating to", round(nrow(dt.male.mutual.likes)/nrow(dt.likes.gender[dt.likes.gender$sender_gender == "Male"])*100, digits = 2), "% of all likes sent by males.\n")
cat("The number of individidual females liking other females is", length(unique(dt.female.mutual.likes$sender_user_id)),".\n")
cat("The number of individidual males liking other males is", length(unique(dt.male.mutual.likes$sender_user_id)),".")
cat("\n\nIn absolute terms, fewer women-to-women likes were sent than men-to-men. In relative terms, the ratio of women-to-women likes is higher than that of men-to-men.")
g.mutual.likes <- as.undirected(g.likes, mode = "mutual")
cat("The clustering coefficient is", transitivity(g.mutual.likes), ".\n\nIt is an extremelly low clustering coefficient, signalling that the chance that two people share mutual likes with a third person is almost 0.")
ggplot() + geom_histogram(aes(x = degree(g.likes)))
cat("A random network is characterized by having a degree distribution which follows a normal distribution. For this reason, there is no clustering in random networks.\nA free-scale network is characterized by having a degree distribution which roughly follows a power law distribution. For this reason, most nodes will have a very low level of connectivity while nodes with large numbers of edges appear in small quantity at every scale, resulting in a highly centralized network.\nA mixed network has fewer and smaller clusters than a scale-free network, the distribution of nodes has a scale and does not follow a pure power law.\nBased on the Magazine article, our network of matches would resemble a mixed network as most users cluster around the median and the tail of the distribution is weak.")
dt.network <- na.omit(dt.users, cols = c("user_id", "inviter_id"))
dt.invites <- dt.network[, 2:1]
g.invites <- graph_from_data_frame(dt.invites, directed = TRUE, vertices = dt.users)
summary(g.invites)
cat("\nThe longest chain is", farthest_vertices(g.invites)$distance, ".")
cat("The clustering coefficient is", transitivity(g.invites), ".\n\nThe clustering coefficient is computed by dividing the number of links among neighbours of a node by the possible links among neighbours of that node. Since only one invite per person can be accepted, there will not be any links among neighbours of any node, resulting in this coefficient being always equal to zero in this network.")
dt.network <- na.omit(dt.users, cols = c("user_id", "inviter_id"))
dt.invites <- dt.network[, 2:1]
g.invites <- graph_from_data_frame(dt.invites, directed = TRUE, vertices = dt.users)
summary(g.invites)
cat("The longest chain is", farthest_vertices(g.invites)$distance, ".")
cat("The clustering coefficient is", transitivity(g.invites), ".\n\nThe clustering coefficient is computed by dividing the number of links among neighbours of a node by the possible links among neighbours of that node. Since only one invite per person can be accepted, there will not be any links among neighbours of any node, resulting in this coefficient being always equal to zero in this network.")
# Length of all the shortest paths between vertices
dt.path <- data.table(count = distance_table(g.invites, directed = TRUE)$res)
dt.path <- cbind(path_length = rownames(dt.path), dt.path)
rownames(dt.path) <- 1:nrow(dt.path)
# Plotting the distribution of the length of all the shortest paths between vertices
ggplot(dt.path, aes(x = path_length, y = count)) + geom_bar(stat = "identity")
# Computing the mean length of the paths between vertices
mean.length <- mean_distance(g.invites, directed = TRUE, unconnected = TRUE)
cat("Yes, we can observe the same cascade behaviour in the invites network as Goel, Watts and Goldstein observed in online networks. Out of", sum(dt.path$count), "cascades only", sum(dt.path$count[dt.path$path_length >= 7]), "had a length of seven or higher (", round(sum(dt.path$count[dt.path$path_length >= 7])/sum(dt.path$count)*100, digits = 2), "%). The majority of instances show no difusion at all (", round(sum(dt.path$count[dt.path$path_length == 1])/sum(dt.path$count)*100, digits = 2), "%). The size distribution of diffusion events is right-skewed and heavy-tailed just as mentioned in the paper with the mean length of cascades being equal to", mean.length, ".")
g.likes <- graph_from_data_frame(dt.likes, directed=TRUE, vertices=NULL)
summary(g.likes)
cat("The clustering coefficient is", transitivity(g.likes), "\n\nIt is very low clustering coefficient signalling that the chance that two people like the same person is very low.")
dt.user.gender <- dt.users[, c("user_id","gender")]
dt.likes.gender <- merge(dt.likes, dt.user.gender, by.x = "sender_user_id", by.y = "user_id")
dt.likes.gender <- merge(dt.likes.gender, dt.user.gender, by.x = "receiver_user_id", by.y = "user_id")
colnames(dt.likes.gender)[4] <- "sender_gender"
colnames(dt.likes.gender)[5] <- "receiver_gender"
dt.female.mutual.likes <- dt.likes.gender[dt.likes.gender$receiver_gender == "Female" & dt.likes.gender$sender_gender == "Female"]
dt.male.mutual.likes <- dt.likes.gender[dt.likes.gender$receiver_gender == "Male" & dt.likes.gender$sender_gender == "Male"]
cat("The number of likes among females is", nrow(dt.female.mutual.likes), ", equating to", round(nrow(dt.female.mutual.likes)/nrow(dt.likes.gender[dt.likes.gender$sender_gender == "Female"])*100, digits = 2), "% of all likes sent by females.\n")
cat("The number of likes among males is", nrow(dt.male.mutual.likes), ", equating to", round(nrow(dt.male.mutual.likes)/nrow(dt.likes.gender[dt.likes.gender$sender_gender == "Male"])*100, digits = 2), "% of all likes sent by males.\n")
cat("The number of individidual females liking other females is", length(unique(dt.female.mutual.likes$sender_user_id)),".\n")
cat("The number of individidual males liking other males is", length(unique(dt.male.mutual.likes$sender_user_id)),".")
cat("In absolute terms, fewer women-to-women likes were sent than men-to-men. In relative terms, the ratio of women-to-women likes is higher than that of men-to-men.")
dt.user.gender <- dt.users[, c("user_id","gender")]
dt.likes.gender <- merge(dt.likes, dt.user.gender, by.x = "sender_user_id", by.y = "user_id")
dt.likes.gender <- merge(dt.likes.gender, dt.user.gender, by.x = "receiver_user_id", by.y = "user_id")
colnames(dt.likes.gender)[4] <- "sender_gender"
colnames(dt.likes.gender)[5] <- "receiver_gender"
dt.female.mutual.likes <- dt.likes.gender[dt.likes.gender$receiver_gender == "Female" & dt.likes.gender$sender_gender == "Female"]
dt.male.mutual.likes <- dt.likes.gender[dt.likes.gender$receiver_gender == "Male" & dt.likes.gender$sender_gender == "Male"]
cat("The number of likes among females is", nrow(dt.female.mutual.likes), ", equating to", round(nrow(dt.female.mutual.likes)/nrow(dt.likes.gender[dt.likes.gender$sender_gender == "Female"])*100, digits = 2), "% of all likes sent by females.\n")
cat("The number of likes among males is", nrow(dt.male.mutual.likes), ", equating to", round(nrow(dt.male.mutual.likes)/nrow(dt.likes.gender[dt.likes.gender$sender_gender == "Male"])*100, digits = 2), "% of all likes sent by males.\n")
cat("The number of individidual females liking other females is", length(unique(dt.female.mutual.likes$sender_user_id)),".\n")
cat("The number of individidual males liking other males is", length(unique(dt.male.mutual.likes$sender_user_id)),".\n")
cat("In absolute terms, fewer women-to-women likes were sent than men-to-men. In relative terms, the ratio of women-to-women likes is higher than that of men-to-men.")
ggplot() + geom_histogram(aes(x = degree(g.likes)))
cat("A random network is characterized by having a degree distribution which follows a normal distribution. For this reason, there is no clustering in random networks.\nA free-scale network is characterized by having a degree distribution which roughly follows a power law distribution. For this reason, most nodes will have a very low level of connectivity while nodes with large numbers of edges appear in small quantity at every scale, resulting in a highly centralized network.\nA mixed network has fewer and smaller clusters than a scale-free network, the distribution of nodes has a scale and does not follow a pure power law.\nBased on the Quanta Magazine article, our network of matches would resemble a mixed network as most users cluster around the median and the tail of the distribution is weak.")
dt.user.gender <- dt.users[, c("user_id","gender")]
dt.likes.gender <- merge(dt.likes, dt.user.gender, by.x = "sender_user_id", by.y = "user_id")
dt.likes.gender <- merge(dt.likes.gender, dt.user.gender, by.x = "receiver_user_id", by.y = "user_id")
colnames(dt.likes.gender)[4] <- "sender_gender"
colnames(dt.likes.gender)[5] <- "receiver_gender"
dt.female.mutual.likes <- dt.likes.gender[dt.likes.gender$receiver_gender == "Female" & dt.likes.gender$sender_gender == "Female"]
dt.male.mutual.likes <- dt.likes.gender[dt.likes.gender$receiver_gender == "Male" & dt.likes.gender$sender_gender == "Male"]
cat("The number of likes among females is", nrow(dt.female.mutual.likes), ", equating to", round(nrow(dt.female.mutual.likes)/nrow(dt.likes.gender[dt.likes.gender$sender_gender == "Female"])*100, digits = 2), "% of all likes sent by females.\n")
cat("The number of likes among males is", nrow(dt.male.mutual.likes), ", equating to", round(nrow(dt.male.mutual.likes)/nrow(dt.likes.gender[dt.likes.gender$sender_gender == "Male"])*100, digits = 2), "% of all likes sent by males.\n")
cat("The number of individidual females liking other females is", length(unique(dt.female.mutual.likes$sender_user_id)),".\n")
cat("The number of individidual males liking other males is", length(unique(dt.male.mutual.likes$sender_user_id)),".\n")
cat("In absolute terms, fewer women-to-women likes were sent than men-to-men. In relative terms, more women-to-women likes were sent than men-to-men.")
library(data.table)
library(ggplot2)
library(igraph)
load("nda-dating-likes.RData")
dt.network <- na.omit(dt.users, cols = c("user_id", "inviter_id"))
dt.invites <- dt.network[, 2:1]
g.invites <- graph_from_data_frame(dt.invites, directed = TRUE, vertices = dt.users)
summary(g.invites)
cat("The longest chain is", farthest_vertices(g.invites)$distance, ".")
cat("The clustering coefficient is", transitivity(g.invites), ".\n\nThe clustering coefficient is computed by dividing the number of links among neighbours of a node by the possible links among neighbours of that node. Since only one invite per person can be accepted, there will not be any links among neighbours of any node, resulting in this coefficient being always equal to zero in this network.")
# Length of all the shortest paths between vertices
dt.path <- data.table(count = distance_table(g.invites, directed = TRUE)$res)
dt.path <- cbind(path_length = rownames(dt.path), dt.path)
rownames(dt.path) <- 1:nrow(dt.path)
# Plotting the distribution of the length of all the shortest paths between vertices
ggplot(dt.path, aes(x = path_length, y = count)) + geom_bar(stat = "identity")
# Computing the mean length of the paths between vertices
mean.length <- mean_distance(g.invites, directed = TRUE, unconnected = TRUE)
cat("Yes, we can observe the same cascade behaviour in the invites network as Goel, Watts and Goldstein observed in online networks. Out of", sum(dt.path$count), "cascades only", sum(dt.path$count[dt.path$path_length >= 7]), "had a length of seven or higher (", round(sum(dt.path$count[dt.path$path_length >= 7])/sum(dt.path$count)*100, digits = 2), "%). The majority of instances show no difusion at all (", round(sum(dt.path$count[dt.path$path_length == 1])/sum(dt.path$count)*100, digits = 2), "%). The size distribution of diffusion events is right-skewed and heavy-tailed just as mentioned in the paper with the mean length of cascades being equal to", mean.length, ".")
# Retrieving only the rows without NAs in the user_id and inviter_id columns
dt.network.gender <- na.omit(dt.users, cols = c("user_id", "inviter_id", "gender"))
# Creating a dataframe with the edge list in the first two columns
dt.invites.gender <- dt.network.gender[, 2:1]
# Creating igraph directed graph
g.gender <- graph_from_data_frame(dt.invites.gender, directed = TRUE, vertices = dt.users)
# Changing gender from categorical to numeric to compute assortivity measure (could have used assortativity_nominal instead)
gender <- as.numeric(factor(V(g.gender)$gender))
# Computing assortivity coefficient
gender.assortivity <- assortativity(g.gender, gender, directed = TRUE)
# Similar steps were taken for the age assortivity
dt.network.age <- na.omit(dt.users, cols = c("user_id", "inviter_id", "birth_year"))
dt.invites.age <- dt.network.age[ ,2:1]
g.age <- graph_from_data_frame(dt.invites.age, directed = TRUE, vertices = dt.users)
age <- factor(V(g.age)$birth_year)
age.assortivity <- assortativity(g.age, age, directed = TRUE)
cat("The assortivity coefficient measures the level of homophily of the graph based on some vertex labeling or values assigned to vertices. The assortivity coefficient considering gender is", gender.assortivity, "which is a positive value, meaning that men are more likely to invite other men and that women are more likely to invite other women. The assortivity coefficient considering age is", age.assortivity, "which is a positive value, meaning that people tend to invite other people that are close in age. Gender assortivity is lower than age assortivity meaning that the likelihood that people invite other people that are close in age is higher than that of the same gender.")
# <Answer here>
g.likes <- graph_from_data_frame(dt.likes, directed=TRUE, vertices=NULL)
summary(g.likes)
cat("The clustering coefficient is", transitivity(g.likes), "\n\nIt is very low clustering coefficient signalling that the chance that two people like the same person is very low.")
dt.user.gender <- dt.users[, c("user_id","gender")]
dt.likes.gender <- merge(dt.likes, dt.user.gender, by.x = "sender_user_id", by.y = "user_id")
dt.likes.gender <- merge(dt.likes.gender, dt.user.gender, by.x = "receiver_user_id", by.y = "user_id")
colnames(dt.likes.gender)[4] <- "sender_gender"
colnames(dt.likes.gender)[5] <- "receiver_gender"
dt.female.mutual.likes <- dt.likes.gender[dt.likes.gender$receiver_gender == "Female" & dt.likes.gender$sender_gender == "Female"]
dt.male.mutual.likes <- dt.likes.gender[dt.likes.gender$receiver_gender == "Male" & dt.likes.gender$sender_gender == "Male"]
cat("The number of likes among females is", nrow(dt.female.mutual.likes), ", equating to", round(nrow(dt.female.mutual.likes)/nrow(dt.likes.gender[dt.likes.gender$sender_gender == "Female"])*100, digits = 2), "% of all likes sent by females.\n")
cat("The number of likes among males is", nrow(dt.male.mutual.likes), ", equating to", round(nrow(dt.male.mutual.likes)/nrow(dt.likes.gender[dt.likes.gender$sender_gender == "Male"])*100, digits = 2), "% of all likes sent by males.\n")
cat("The number of individidual females liking other females is", length(unique(dt.female.mutual.likes$sender_user_id)),".\n")
cat("The number of individidual males liking other males is", length(unique(dt.male.mutual.likes$sender_user_id)),".\n")
cat("In absolute terms, fewer women-to-women likes were sent than men-to-men. In relative terms, more women-to-women likes were sent than men-to-men.")
g.mutual.likes <- as.undirected(g.likes, mode = "mutual")
cat("The clustering coefficient is", transitivity(g.mutual.likes), ".\n\nIt is an extremelly low clustering coefficient, signalling that the chance that two people share mutual likes with a third person is almost 0.")
ggplot() + geom_histogram(aes(x = degree(g.likes)))
cat("A random network is characterized by having a degree distribution which follows a normal distribution. For this reason, there is no clustering in random networks.\nA free-scale network is characterized by having a degree distribution which roughly follows a power law distribution. For this reason, most nodes will have a very low level of connectivity while nodes with large numbers of edges appear in small quantity at every scale, resulting in a highly centralized network.\nA mixed network has fewer and smaller clusters than a scale-free network, the distribution of nodes has a scale and does not follow a pure power law.\nBased on the Quanta Magazine article, our network of matches would resemble a mixed network as most users cluster around the median and the tail of the distribution is weak.")
# <Answer here>
# Retrieving only the rows without NAs in the user_id and inviter_id columns
dt.network.gender <- na.omit(dt.users, cols = c("user_id", "inviter_id", "gender"))
library(data.table)
library(ggplot2)
library(igraph)
load("nda-dating-likes.RData")
dt.network <- na.omit(dt.users, cols = c("user_id", "inviter_id"))
dt.invites <- dt.network[, 2:1]
g.invites <- graph_from_data_frame(dt.invites, directed = TRUE, vertices = dt.users)
summary(g.invites)
cat("The longest chain is", farthest_vertices(g.invites)$distance, ".")
cat("The clustering coefficient is", transitivity(g.invites), ".\n\nThe clustering coefficient is computed by dividing the number of links among neighbours of a node by the possible links among neighbours of that node. Since only one invite per person can be accepted, there will not be any links among neighbours of any node, resulting in this coefficient being always equal to zero in this network.")
# Length of all the shortest paths between vertices
dt.path <- data.table(count = distance_table(g.invites, directed = TRUE)$res)
dt.path <- cbind(path_length = rownames(dt.path), dt.path)
rownames(dt.path) <- 1:nrow(dt.path)
# Plotting the distribution of the length of all the shortest paths between vertices
ggplot(dt.path, aes(x = path_length, y = count)) + geom_bar(stat = "identity")
# Computing the mean length of the paths between vertices
mean.length <- mean_distance(g.invites, directed = TRUE, unconnected = TRUE)
cat("Yes, we can observe the same cascade behaviour in the invites network as Goel, Watts and Goldstein observed in online networks. Out of", sum(dt.path$count), "cascades only", sum(dt.path$count[dt.path$path_length >= 7]), "had a length of seven or higher (", round(sum(dt.path$count[dt.path$path_length >= 7])/sum(dt.path$count)*100, digits = 2), "%). The majority of instances show no difusion at all (", round(sum(dt.path$count[dt.path$path_length == 1])/sum(dt.path$count)*100, digits = 2), "%). The size distribution of diffusion events is right-skewed and heavy-tailed just as mentioned in the paper with the mean length of cascades being equal to", mean.length, ".")
# Retrieving only the rows without NAs in the user_id and inviter_id columns
dt.network.gender <- na.omit(dt.users, cols = c("user_id", "inviter_id", "gender"))
# Creating a dataframe with the edge list in the first two columns
dt.invites.gender <- dt.network.gender[, 2:1]
# Creating igraph directed graph
g.gender <- graph_from_data_frame(dt.invites.gender, directed = TRUE, vertices = dt.users)
# Changing gender from categorical to numeric to compute assortivity measure (could have used assortativity_nominal instead)
gender <- as.numeric(factor(V(g.gender)$gender))
# Computing assortivity coefficient
gender.assortativity <- assortativity(g.gender, gender, directed = TRUE)
# Similar steps were taken for the age assortivity
dt.network.age <- na.omit(dt.users, cols = c("user_id", "inviter_id", "birth_year"))
dt.invites.age <- dt.network.age[ ,2:1]
g.age <- graph_from_data_frame(dt.invites.age, directed = TRUE, vertices = dt.users)
age <- factor(V(g.age)$birth_year)
age.assortativity <- assortativity(g.age, age, directed = TRUE)
cat("The assortativity coefficient measures the level of homophily of the graph based on some vertex labeling or values assigned to vertices. The assortativity coefficient considering gender is", gender.assortativity, "which is a positive value, meaning that men are more likely to invite other men and that women are more likely to invite other women. The assortativity coefficient considering age is", age.assortativity, "which is a positive value, meaning that people tend to invite other people that are close in age. Gender assortativity is lower than age assortativity meaning that the likelihood that people invite other people that are close in age is higher than that of the same gender.")
# <Answer here>
g.likes <- graph_from_data_frame(dt.likes, directed=TRUE, vertices=NULL)
summary(g.likes)
cat("The clustering coefficient is", transitivity(g.likes), "\n\nIt is very low clustering coefficient signalling that the chance that two people like the same person is very low.")
dt.user.gender <- dt.users[, c("user_id","gender")]
dt.likes.gender <- merge(dt.likes, dt.user.gender, by.x = "sender_user_id", by.y = "user_id")
dt.likes.gender <- merge(dt.likes.gender, dt.user.gender, by.x = "receiver_user_id", by.y = "user_id")
colnames(dt.likes.gender)[4] <- "sender_gender"
colnames(dt.likes.gender)[5] <- "receiver_gender"
dt.female.mutual.likes <- dt.likes.gender[dt.likes.gender$receiver_gender == "Female" & dt.likes.gender$sender_gender == "Female"]
dt.male.mutual.likes <- dt.likes.gender[dt.likes.gender$receiver_gender == "Male" & dt.likes.gender$sender_gender == "Male"]
cat("The number of likes among females is", nrow(dt.female.mutual.likes), ", equating to", round(nrow(dt.female.mutual.likes)/nrow(dt.likes.gender[dt.likes.gender$sender_gender == "Female"])*100, digits = 2), "% of all likes sent by females.\n")
cat("The number of likes among males is", nrow(dt.male.mutual.likes), ", equating to", round(nrow(dt.male.mutual.likes)/nrow(dt.likes.gender[dt.likes.gender$sender_gender == "Male"])*100, digits = 2), "% of all likes sent by males.\n")
cat("The number of individidual females liking other females is", length(unique(dt.female.mutual.likes$sender_user_id)),".\n")
cat("The number of individidual males liking other males is", length(unique(dt.male.mutual.likes$sender_user_id)),".\n")
cat("In absolute terms, fewer women-to-women likes were sent than men-to-men. In relative terms, more women-to-women likes were sent than men-to-men.")
g.mutual.likes <- as.undirected(g.likes, mode = "mutual")
cat("The clustering coefficient is", transitivity(g.mutual.likes), ".\n\nIt is an extremelly low clustering coefficient, signalling that the chance that two people share mutual likes with a third person is almost 0.")
ggplot() + geom_histogram(aes(x = degree(g.likes)))
cat("A random network is characterized by having a degree distribution which follows a normal distribution. For this reason, there is no clustering in random networks.\nA free-scale network is characterized by having a degree distribution which roughly follows a power law distribution. For this reason, most nodes will have a very low level of connectivity while nodes with large numbers of edges appear in small quantity at every scale, resulting in a highly centralized network.\nA mixed network has fewer and smaller clusters than a scale-free network, the distribution of nodes has a scale and does not follow a pure power law.\nBased on the Quanta Magazine article, our network of matches would resemble a mixed network as most users cluster around the median and the tail of the distribution is weak.")
# <Answer here>
dt.network <- na.omit(dt.users, cols = c("user_id", "inviter_id"))
dt.invites <- dt.network[, 2:1]
g.invites <- graph_from_data_frame(dt.invites, directed = TRUE, vertices = dt.users)
summary(g.invites)
cat("The longest chain is", farthest_vertices(g.invites)$distance, ".")
cat("The clustering coefficient is", transitivity(g.invites), ".\n\nThe clustering coefficient is computed by dividing the number of links among neighbors of a node by the possible links among neighbors of that node. Since only one invite per person can be accepted, there will not be any links among neighbors of any node, resulting in this coefficient being always equal to zero in this network.")
# Retrieving only the rows without NAs in the user_id and inviter_id columns
dt.network.gender <- na.omit(dt.users, cols = c("user_id", "inviter_id", "gender"))
# Creating a dataframe with the edge list in the first two columns
dt.invites.gender <- dt.network.gender[, 2:1]
# Creating igraph directed graph
g.gender <- graph_from_data_frame(dt.invites.gender, directed = TRUE, vertices = dt.users)
# Changing gender from categorical to numeric to compute assortivity measure (could have used assortativity_nominal instead)
gender <- as.numeric(factor(V(g.gender)$gender))
# Computing assortivity coefficient
gender.assortativity <- assortativity(g.gender, gender, directed = TRUE)
# Similar steps were taken for the age assortivity
dt.network.age <- na.omit(dt.users, cols = c("user_id", "inviter_id", "birth_year"))
dt.invites.age <- dt.network.age[ ,2:1]
g.age <- graph_from_data_frame(dt.invites.age, directed = TRUE, vertices = dt.users)
age <- factor(V(g.age)$birth_year)
age.assortativity <- assortativity(g.age, age, directed = TRUE)
cat("The assortativity coefficient measures the level of homophily of the graph based on some vertex labeling or values assigned to vertices. The assortativity coefficient considering gender is", gender.assortativity, "which is a positive value, meaning that men are more likely to invite other men and that women are more likely to invite other women. The assortativity coefficient considering age is", age.assortativity, "which is a positive value, meaning that people tend to invite other people that are close in age. Gender assortativity is lower than age assortativity meaning that the likelihood that people invite other people that are close in age is higher than that of the same gender.")
g.likes <- graph_from_data_frame(dt.likes, directed=TRUE, vertices=NULL)
summary(g.likes)
cat("The clustering coefficient is", transitivity(g.likes), "\n\nIt is very low clustering coefficient signaling that the chance that two people like the same person is very low.")
install.packages(rsconnect)
install.packages("rsconnect")
rsconnect::setAccountInfo(name='maria-ferreira-50465', token='F20DCC264DDE0B81C4FFCAB502AF166E', secret='TBuMVrUwoEUHr4EyHXQ24qPl9sw7MwevPBsUiair')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
install.packages(c('ggplot2', 'shiny'))
library(shiny)
library(ggplot2)
function(input, output) {
dataset <- reactive({
diamonds[sample(nrow(diamonds), input$sampleSize),]
})
output$plot <- renderPlot({
p <- ggplot(dataset(), aes_string(x=input$x, y=input$y)) + geom_point()
if (input$color != 'None')
p <- p + aes_string(color=input$color)
facets <- paste(input$facet_row, '~', input$facet_col)
if (facets != '. ~ .')
p <- p + facet_grid(facets)
if (input$jitter)
p <- p + geom_jitter()
if (input$smooth)
p <- p + geom_smooth()
print(p)
}, height=700)
}
library(shiny)
library(ggplot2)
dataset <- diamonds
fluidPage(
titlePanel("Diamonds Explorer"),
sidebarPanel(
sliderInput('sampleSize', 'Sample Size', min=1, max=nrow(dataset),
value=min(1000, nrow(dataset)), step=500, round=0),
selectInput('x', 'X', names(dataset)),
selectInput('y', 'Y', names(dataset), names(dataset)[[2]]),
selectInput('color', 'Color', c('None', names(dataset))),
checkboxInput('jitter', 'Jitter'),
checkboxInput('smooth', 'Smooth'),
selectInput('facet_row', 'Facet Row', c(None='.', names(dataset))),
selectInput('facet_col', 'Facet Column', c(None='.', names(dataset)))
),
mainPanel(
plotOutput('plot')
)
)
library(shiny)
runApp()
runApp('Project-Shinny-App')
library(rsconnect)
deployApp()
load("~/Mestrado/Network Analytics/Group assignment/nda-assignment-similarity/nda-similarity-anon.RData")
dt.books.categories <- data.table[dt.books[,list(n_cat = .N), by=categories]]
library(data.table)
library(ggplot2)
library(igraph)
library(stringr)
dt.books <- read.csv(file = "books.csv")
dt.books <- data.table(dt.books[,c("title","authors","categories","published_year","average_rating")])
dt.books[,"title"] = str_to_lower(dt.books[,"title"])
dt.books[,"authors"] = str_to_title(dt.books[,"authors"])
View(dt.books)
dt.books.categories <- data.table[dt.books[,list(n_cat = .N), by=categories]]
library(data.table)
library(ggplot2)
library(igraph)
library(stringr)
dt.books <- read.csv(file = "books.csv")
View(dt.books)
library(data.table)
library(ggplot2)
library(igraph)
library(stringr)
dt.books <- read.csv(file = "books.csv")
dt.books <- data.table(dt.books[,c("title","authors","categories","published_year","average_rating")])
dt.books[,"title"] = str_to_lower(dt.books[,"title"])
dt.books[,"authors"] = str_to_title(dt.books[,"authors"])
View(dt.books)
dt.books.categories <- data.table[dt.books[,list(n_cat = .N), by=categories]]
dt.books <- read.csv(file = "books.csv")
dt.books <- read.csv("books.csv")
dt.books <- read.csv("books.csv")
dt.books <- read.csv("books.csv")
dt.books <- read.csv("books.csv")
dt.books <- read.csv("books.csv")
dt.books <- read.csv(file = "books.csv")
f <- file.choose()
f
dt.books <- read.csv("C:\\Users\\Maria Ferreira\\Documents\\Project-Shinny-App\\books.csv")
View(dt.books)
shiny::runApp('C:/Users/Maria Ferreira/Desktop/myApp')
install.packages("shinythemes")
runApp('C:/Users/Maria Ferreira/Desktop/myApp')
runApp('C:/Users/Maria Ferreira/Desktop/myApp')
runApp('C:/Users/Maria Ferreira/Desktop/myApp')
runApp('C:/Users/Maria Ferreira/Desktop/myApp')
runApp('C:/Users/Maria Ferreira/Desktop/myApp')
runApp('C:/Users/Maria Ferreira/Desktop/myApp')
runApp('C:/Users/Maria Ferreira/Desktop/myApp')
runApp('C:/Users/Maria Ferreira/Desktop/myApp')
runApp('C:/Users/Maria Ferreira/Desktop/myApp')
setwd("C:/Users/Maria Ferreira/Desktop/NetworkAnalyticsShiny/NetworkAnalyticsProject")
library(data.table)
library(ggplot2)
library(igraph)
library(shiny)
# library(readxl)
library(openxlsx)
dt.books <- read.xlsx("dt.books.clean.xlsx")
dt.books <- dt.books[,c("title", "authors", "categories", "published_year", "average_rating")]
# Creating the column avg_rating_class that tells for each BOOK the rating that they are in
dt.books$avg_rating_class <- with(dt.books, ifelse(average_rating >= 0 & average_rating < 0.5, "[0-0.5[", ifelse(average_rating >= 0.5 & average_rating < 1, "[0.5 -1[", ifelse(average_rating >= 1 & average_rating < 1.5, "[1-1.5[", ifelse(average_rating >= 1.5 & average_rating < 2, "[1.5-2[", ifelse(average_rating >= 2 & average_rating <= 2.5, "[2-2.5]", ifelse(average_rating >= 2.5 & average_rating <= 3, "[2.5-3[", ifelse(average_rating >= 3 & average_rating <= 3.5, "[3-3.5[", ifelse(average_rating >= 3.5 & average_rating <= 4,  "[3.5-4[", ifelse(average_rating >= 4 & average_rating <= 4.5,  "[4-4.5[", ifelse(average_rating >= 4.5 & average_rating <= 5,  "[4.5-5]", "NA")))))))))))
# Creating the column avg_rating_individual that tells for each AUTHOR the rating that they are in (by doing the average of all their books)
average.ratings <- vector()
for (author in dt.books$authors) {
the_author <- dt.books[dt.books$authors %in% author, ]
average_rating_author <- mean(the_author$average_rating)
average.ratings <- c(average.ratings, average_rating_author)
}
dt.books$avg_rating_individual <- average.ratings
# Creating the column avg_rating_individual_class that tells for each AUTHOR the rating that they are in (same as above but with new column)
dt.books$avg_rating_individual_class <- with(dt.books, ifelse(avg_rating_individual >= 0 & avg_rating_individual < 0.5, "[0-0.5[", ifelse(avg_rating_individual >= 0.5 & avg_rating_individual < 1, "[0.5 -1[", ifelse(avg_rating_individual >= 1 & avg_rating_individual < 1.5, "[1-1.5[", ifelse(avg_rating_individual >= 1.5 & avg_rating_individual < 2, "[1.5-2[", ifelse(avg_rating_individual >= 2 & avg_rating_individual <= 2.5, "[2-2.5]", ifelse(avg_rating_individual >= 2.5 & avg_rating_individual <= 3, "[2.5-3[", ifelse(avg_rating_individual >= 3 & avg_rating_individual <= 3.5, "[3-3.5[", ifelse(avg_rating_individual >= 3.5 & avg_rating_individual <= 4,  "[3.5-4[", ifelse(avg_rating_individual >= 4 & avg_rating_individual <= 4.5,  "[4-4.5[", ifelse(avg_rating_individual >= 4.5 & avg_rating_individual <= 5,  "[4.5-5]", "NA")))))))))))
main.categories <- vector()
for (author in dt.books$author) {
the_author <- dt.books[dt.books$authors %in% author, ]
main.category <- names(sort(table(the_author$categories), decreasing=TRUE)[1])
main.categories <- c(main.categories, main.category)
}
dt.books$main_category <- main.categories
dt.top.50.authors.published <- dt.books[, n_books := .N, by=authors]
dt.authors <- data.table(authors = unique(dt.books$authors), type= TRUE)
dt.categories <- data.table(authors = unique(dt.books$categories), type= FALSE)
dt.vertices <- rbind(dt.authors, dt.categories)
g <- graph.data.frame(dt.books[c("authors","categories")], directed = FALSE, vertices = dt.vertices)
g.categories <- bipartite.projection(g)$proj2
plot(g.categories)
save(dt.books, file="books.RData")
dt.top.50.authors.published
